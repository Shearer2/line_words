import psycopg2
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import os


# Bot - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞ –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –æ—Ç–≤–µ—á–∞—Ç—å.
# Dispatcher - –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
# Executor - –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å.
# Types - –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–æ –µ—Å—Ç—å –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
# ReplyKeyboardRemove –∏ ReplyKeyboardMarkup –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∞ –∫–ª–∞—Å—Å KeyboardButton
# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫.
# Reply-–∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é—Ç—Å—è –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, –∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é—Ç—Å—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.
# InlineKeyboardMarkup –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫, –∞ InlineKeyboardButton - –¥–ª—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è.
class WordLine:
    def __init__(self, letters):
        self.host = '127.0.0.1'
        self.user = 'postgres'
        self.password ='alegedor0012'  # input('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å: '),
        self.database = 'line_words'
        self.letters = letters

    def search_database(self):
        connection = psycopg2.connect(
            host=self.host,
            user=self.user,
            password=self.password,  # input('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å: '),
            database=self.database
        )

        with connection.cursor() as cursor:
            cursor.execute(
                """SELECT word FROM words.all_words"""
            )
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ø–∏—Å–æ–∫.
            words = list(map(lambda x: x[0], cursor.fetchall()))

        connection.close()
        return self.right_words(words)

    def right_words(self, words: list):
        result = ['–í–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞:']
        flag = False
        for word in words:
            if sorted(word) == sorted(self.letters):
                result.append(word)
            else:
                for i in word:
                    if word.count(i) == self.letters.count(i):
                        flag = True
                    else:
                        flag = False
                        break
                if flag:
                    result.append(word)
        result.sort(key=len)
        result.reverse()
        if len(result) > 1:
            return '\n'.join(result)
        return '–°–ª–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ –Ω–µ—Ç.'


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –æ—Ç –ø–æ—Å—Ç—Ä–æ–Ω–Ω–∏—Ö –≥–ª–∞–∑.
load_dotenv()
# –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã bot –∏ Dispatcher, –ø–µ—Ä–µ–¥–∞–≤ –ø–µ—Ä–≤–æ–º—É —Ç–æ–∫–µ–Ω. –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞—Ç—å, —Ç–æ –∫–æ–¥ –Ω–µ –±—É–¥–µ—Ç
# —Ä–∞–±–æ—Ç–∞—Ç—å. –ó–∞–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞.
bot = Bot(token=os.getenv('API_TOKEN'))
dp = Dispatcher(bot)
HELP_COMMAND = """
<b>/help</b> - <em>—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</em>
<b>/start</b> - <em>–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º</em>
<b>/links</b> - <em>–ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π github</em>
<b>/projects</b> - <em>–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏</em>
<b>/description</b> - <em>–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</em>
<b>/vote</b> - <em>–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</em>
"""


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.
async def on_startup(_):
    print("–ë–æ—Ç –≤–∫–ª—é—á—ë–Ω.")


# –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start,
# –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å message_handler –∏ –ø—Ä–æ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–≤–µ—Ç–∞.
@dp.message_handler(commands='start')  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ, –Ω–∞ –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ä–µ–∞–≥–∏—Ä—É–µ–º.
async def send_welcome(message: types.Message):
    # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–∏—à–µ–º await. –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ reply.
    # parse_mode –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ —è–∑—ã–∫, —á—Ç–æ–±—ã –≤ —Ç–µ–∫—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞.
    await message.reply("<em>–ü—Ä–∏–≤–µ—Ç! ü§ö\n –Ø - –±–æ—Ç ü§ñ, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –∏–≥—Ä—ã –ª–∏–Ω–∏—è —Å–ª–æ–≤–∞.</em>", parse_mode="HTML")
    # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—É–¥–∞, –≥–¥–µ –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å message.chat.id. –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    # —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –ø–∏—à–µ—Ç –≤ –≥—Ä—É–ø–ø–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è message.from_user.id.
    await bot.send_photo(chat_id=message.chat.id, photo="https://play-lh.googleusercontent.com/F3mmWSAnQ8Y3ys8KY8v0tD0Sd1hLHoSbA3SGsmQWbt5KsZq9rh2grAefGbgQKkv2Tlg")


# –í –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã–∑–æ–≤–∞ —É–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏, –∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ reply_markup –ø–µ—Ä–µ–¥–∞—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—à–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
@dp.message_handler(commands='links')
async def url_command(message: types.Message):
    # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ answer.
    #await message.answer('–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:', reply_markup=urlkb)
    pass


@dp.message_handler(commands='help')
async def bot_help(message: types.Message):
    await message.answer(HELP_COMMAND, parse_mode="HTML")
    #await message.answer('–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—Ç–≥–∞–¥—ã–≤–∞–Ω–∏—è —Å–ª–æ–≤ –∏–∑ –±—É–∫–≤ –≤ –∏–≥—Ä–µ –õ–∏–Ω–∏—è —Å–ª–æ–≤–∞.\n'
    #                     '–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞.')


@dp.message_handler(commands='projects')
async def projects(message: types.Message):
    await message.answer('–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã:', reply_markup=urlkb)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤.
@dp.message_handler(commands='give')
async def bot_sticker(message: types.Message):
    await bot.send_sticker(message.from_user.id,
                           sticker="CAACAgIAAxkBAAEKCmFk3KOnuqxhgaM2DFhFG3VyNWsHtQACPwADQdL3IfZZVXp87Hm5MAQ")
    await message.answer('–õ—é–±–ª—é –ú–∏–ª–∞–Ω–æ—á–∫—É —á—É–¥–µ—Å–Ω—É—é')


@dp.message_handler(content_types='sticker')
async def send_sticker_id(message: types.Message):
    await message.reply(f"Id —Å—Ç–∏–∫–µ—Ä–∞:\n{message.sticker.file_id}")


@dp.message_handler(commands='description')
async def bot_description(message: types.Message):
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.")


@dp.message_handler(commands='vote')
async def bot_vote(message: types.Message):
    ikb = InlineKeyboardMarkup(row_width=1)
    button1 = InlineKeyboardButton(text="–î–∞", callback_data="like")
    button2 = InlineKeyboardButton(text="–ù–µ—Ç", callback_data="dislike")
    ikb.add(button1, button2)
    await message.answer("–í—Å–µ –ª–∏ —Å–ª–æ–≤–∞ —É–≥–∞–¥—ã–≤–∞—é—Ç—Å—è?", reply_markup=ikb)


# –°–æ–∑–¥–∞—ë–º callback —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
@dp.callback_query_handler()
async def vote_callback(callback: types.CallbackQuery):
    if callback.data == 'like':
        # –ù–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å return, —Ç–∞–∫ –∫–∞–∫ callback.answer –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ callback —Ñ—É–Ω–∫—Ü–∏–∏.
        await callback.answer('–°–ª–æ–≤ —Ö–≤–∞—Ç–∞–µ—Ç')
    await callback.answer('–°–ª–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç')


# –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
@dp.message_handler()
async def echo(message: types.Message):
    kb = [
        [
            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏.
            KeyboardButton(text="/help"),
            KeyboardButton(text="/links"),
            KeyboardButton(text="/projects")
        ],
        [
            KeyboardButton(text="/description"),
            KeyboardButton(text="/vote")
        ],
    ]
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –µ–π –ø—Ä–æ –Ω–∞—à–∏ –∫–Ω–æ–ø–∫–∏.
    # –ß—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ–º resize_keyboard=True.
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    # –í —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º reply_markup=keyboard, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
    word_line = WordLine(message.text.lower())
    await message.answer(text=word_line.search_database(), reply_markup=keyboard)


# –ê—Ä–≥—É–º–µ–Ω—Ç row_width –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É.
urlkb = InlineKeyboardMarkup(row_width=1)
# –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Å—ã–ª–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏.
urlButton = InlineKeyboardButton(text='–õ–∏–Ω–∏—è —Å–ª–æ–≤–∞', url='https://github.com/Shearer2/line_words')
urlButton2 = InlineKeyboardButton(text='–£–≥–∞–¥—ã–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª', url='https://github.com/Shearer2/Random_numbers')
urlButton3 = InlineKeyboardButton(text='–£–≥–∞–¥—ã–≤–∞–Ω–∏–µ —Å–ª–æ–≤', url='https://github.com/Shearer2/Random_word')
urlButton4 = InlineKeyboardButton(text='–ü–∞—Ä—Å–µ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤', url='https://github.com/Shearer2/Parser_telegram')
urlButton5 = InlineKeyboardButton(text='–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç', url='https://github.com/Shearer2/Adaptive-site')
# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
urlkb.add(urlButton, urlButton2, urlButton3, urlButton4, urlButton5)


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º. –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞—Ç—å, —Ç–æ –º—ã –Ω–µ –ø–æ–ª—É—á–∏–º –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞.
# start_polling –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è—è –Ω–∞ –Ω—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, —Ç–æ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
if __name__ == '__main__':
    # skip_updates –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–ª–∏—Å—å. –ï—Å–ª–∏ –±—É–¥–µ—Ç False, —Ç–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è
    # –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –ø–æ–∫–∞ –æ–Ω –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω.
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
